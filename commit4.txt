//Drzewo BST
//Rafal Gawlik
//www.algorytm.org
 
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
 
//definicja wezla
struct wezel
{
int wartosc;           //wartosc przechowywana w wezle
struct wezel *rodzic;  //wskaznik na rodzica
struct wezel *l_syn;   //wskaznik na lewe dziecko
struct wezel *p_syn;   //wskaznik na prawe dziecko
};
struct wezel *root;  //wskaŸnik na root'a
 
//funkcja zwraca wskaznik elementu o najmniejszej wartosci (najbardziej na lewo)
struct wezel* naj_lewo(struct wezel *start)
{
if(start->l_syn != NULL)
return naj_lewo(start->l_syn);
else
return start;
}
 
//funkcja zwraca wezel o podanej wartosci, badz NULL, gdy taki wezel nie istnieje
struct wezel* szukaj(struct wezel *start, int wartosc) 
{
//jezeli wezel ma szukana wartosc to odnalezlismy go
if (start->wartosc == wartosc) return start;
//jezeli szukana wartosc jest mniejsza to szukamy w lewym poddrzewie o ile istnieje
else if (wartosc < start->wartosc && start->l_syn != NULL) return szukaj(start->l_syn, wartosc);
//jezeli szukana wartosc jest wieksza to szukamy w prawym poddrzewie o ile istnieje     
else if (wartosc > start->wartosc && start->p_syn != NULL) return szukaj(start->p_syn, wartosc);
return NULL;
}
 
//dodaje wezel o podanej wartosci n, do drzewa o korzeniu start
int dodawanie(int n, struct wezel *start)
{
//jezeli drzewo jest puste to dodaj korzen
if (root == NULL)
{
root = (wezel*)malloc(sizeof *root);
root->wartosc = n;
root->l_syn = NULL;
root->p_syn = NULL;
root->rodzic = NULL;
}
//jezeli zadana wartosc jest mniejsza od korzenia idz do lewego poddrzewa
else if(n < start->wartosc)
{
//jezeli lewe poddrzewo istnieje wywolaj dla niego ta funkcje rekurencyjnie
if(start->l_syn != NULL)
{
dodawanie(n,start->l_syn);
}
//jezeli lewe poddrzewo nie istnieje dodaj nowy wezel o zadanej wartosci
else
{
wezel *nowy = (wezel*)malloc(sizeof *root);
nowy->wartosc = n;
nowy->l_syn = NULL;
nowy->p_syn = NULL;
nowy->rodzic = start;
start->l_syn=nowy;
}
}
//jezeli zadana wartosc jest wieksza lub rowna korzeniowi idz do prawego poddrzewa   
else
{
//jezeli prawe poddrzewo istnieje wywolaj dla niego ta funkcje rekurencyjnie      
if(start->p_syn!=NULL)
{
dodawanie(n,start->p_syn);
}
//jezeli prawe poddrzewo nie istnieje dodaj nowy wezel o zadanej wartosci     
else
{
wezel *nowy = (wezel*)malloc(sizeof *root);
nowy->wartosc = n;
nowy->l_syn = NULL;
nowy->p_syn = NULL;
nowy->rodzic = start;
start->p_syn=nowy;
}
}
return 0;
}